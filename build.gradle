// plugins
apply plugin: 'scala'
apply plugin: 'application'

version = '1.0'

// Application plugin configuration to create an executable
mainClassName = "Delorean"

repositories {
    jcenter()
}

ext {
    scalaVersion = '2.11.0'

    junitVersion = '4.12'
}

dependencies {
    compile("org.scala-lang:scala-compiler:$scalaVersion")
    compile("org.scala-lang:scala-library:$scalaVersion")
    compile('com.typesafe.scala-logging:scala-logging-slf4j_2.11:2.1.2')

    testCompile "junit:junit:$junitVersion"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

build.finalizedBy(installDist)