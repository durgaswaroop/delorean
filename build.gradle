// plugins
apply plugin: 'scala'
apply plugin: 'application'

version = '1.0'

// Application plugin configuration to create an executable
mainClassName = "delorean.Delorean"

repositories {
    jcenter()
}

ext {
    scalaVersion = '2.12.1'

    junitVersion = '4.12'
}

dependencies {
    compile("org.scala-lang:scala-compiler:$scalaVersion")
    compile("org.scala-lang:scala-library:$scalaVersion")

    testCompile "junit:junit:$junitVersion"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'delorean.Delorean'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJars(type: Copy) {
    outputs.upToDateWhen { false }
    from "build/libs/Delorean-all-1.0.jar"
    into "../delorean_test/"
}

build.finalizedBy(installDist)
build.finalizedBy(fatJar)
build.finalizedBy(copyJars)